#include "raylib.h"
#include "resource_dir.h"	// utility header for SearchAndSetResourceDir

#define GRAVITY  0.5f    // Gravedad aplicada en cada frame
#define JUMP_FORCE 10.0f // Fuerza del salto
#define SPEED 5.0f       // Velocidad del personaje
#define SPEED_ENEMY 4.0f // velocidad enemies

#define TILE_SIZE 40  // Tamaño de cada bloque
#define MAP_ROWS 20   // Filas del mapa
#define MAP_COLS 32   // Columnas del mapa

#define GOOMBA_FACING_RIGHT 1
#define GOOMBA_FACING_LEFT -1

#define MARIO_DEAD 0
#define MARIO_LITTLE 1
#define MARIO_BIG 2
#define MARIO_POWER_UP 3

#define GOOMBA_ALIVE 1
#define GOOMBA_DEAD 0

//#define MAP_COLS 100  // Aumentamos el tamaño del nivel en columnas

//definir array 2D mapa
int map[MAP_ROWS][MAP_COLS] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} // Suelo
};

//int map[MAP_ROWS][MAP_COLS] = {
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} // Suelo
//};


// Posición de la "cámara" que controla el desplazamiento del mapa
float cameraX = { 0 };
float cameraY = { 0 };


// Estructura para el personaje
typedef struct {
	Rectangle rect;  // Rectángulo que representa al personaje
	Vector2 speed;   // Velocidad del personaje
	bool isJumping;  // Bandera para saber si está en el aire
	int state; //0 muerto, 1 little, 2 big, 3 power up
	bool immunity;
	float time;
	int hp;
	bool direction;
	bool onGround;
}Player;

typedef struct {
	Rectangle rect;  // Rectángulo que representa al personaje
	Vector2 speed;
	int facing;// Velocidad del personaje
	int state;
} Enemy;


void HandleMarioCollisionWithGoomba(Player& mario, Enemy& goomba) {
	if (goomba.state == 1 && CheckCollisionRecs(mario.rect, goomba.rect)) {
		// Mario's feet are touching Goomba's head (stomp)
		if (mario.rect.y + mario.rect.height - mario.speed.y <= goomba.rect.y) {
			goomba.state = 0; // Goomba dies
		}
		else {
			if (mario.state > 1 && mario.immunity == false) {
				mario.state--; // Mario loses a power level
				mario.immunity = true;
				mario.time = 2.0f;
			}
			else {
				mario.state = 0; // Mario dies
			}
		}
		if (mario.rect.x < goomba.rect.x) {
			mario.rect.x -= 5;  // Push left
		}
		else {
			mario.rect.x += 5;  // Push right
		}
	}
}

void Immunity(Player& mario) {

	if (mario.immunity) {
		mario.time -= GetFrameTime();
		if (mario.time <= 0) {
			mario.immunity = false;
		}
	}
}

int main()
{
	//right side{

	Image bmarioImage1 = LoadImage("resources/bmario1.png");
	Image bmarioImage2 = LoadImage("resources/bmario2.png");
	Image bmarioImage3 = LoadImage("resources/bmario3.png");
	Image bmarioImage4 = LoadImage("resources/bmario4.png");
	Image bmarioImage5 = LoadImage("resources/bmario5.png");

	//left side
	Image LbmarioImage1 = LoadImage("resources/Lbmario1.png");
	Image LbmarioImage2 = LoadImage("resources/Lbmario2.png");
	Image LbmarioImage3 = LoadImage("resources/Lbmario3.png");
	Image LbmarioImage4 = LoadImage("resources/Lbmario4.png");
	Image LbmarioImage5 = LoadImage("resources/Lbmario5.png");

	//small mario

	//right side
	Image marioImage1 = LoadImage("resources/mario1.png");
	Image marioImage2 = LoadImage("resources/mario2.png");
	Image marioImage3 = LoadImage("resources/mario3.png");
	Image marioImage4 = LoadImage("resources/mario4.png");
	Image marioImage5 = LoadImage("resources/mario5.png");

	//left side
	Image LmarioImage1 = LoadImage("resources/Lmario1.png");
	Image LmarioImage2 = LoadImage("resources/Lmario2.png");
	Image LmarioImage3 = LoadImage("resources/Lmario3.png");
	Image LmarioImage4 = LoadImage("resources/Lmario4.png");
	Image LmarioImage5 = LoadImage("resources/Lmario5.png");

	//goomba sprites

	Image goombaImage1 = LoadImage("resources/Goomba1.png");
	Image goombaImage2 = LoadImage("resources/Goomba2.png");
	Image goombaImage3 = LoadImage("resources/Goomba3.png");

	SetTargetFPS(60);

	const int screenWidth = 512;
	const int screenHeight = 448;

	// Tell the window to use vsync and work on high DPI displays
	SetConfigFlags(FLAG_VSYNC_HINT | FLAG_WINDOW_HIGHDPI);

	// Create the window and OpenGL context
	InitWindow(MAP_COLS * TILE_SIZE, MAP_ROWS * TILE_SIZE, "Super Mario - Matriz de Mapa");

	//camaras
	Camera2D camera = { 0 };
	camera.target = { 0, 0 };
	camera.offset = { 640, 740 };
	camera.rotation = 0.0f;
	camera.zoom = 1.0f;

	Player mario = { {640, 400, 40, 40}, {0, 0}, false, 2, false, 0, 3, true};
	Enemy goomba = { {300, 720, 40, 40}, {0, 0}, GOOMBA_FACING_RIGHT, 1};

	// Utility function from resource_dir.h to find the resources folder and set it as the current working directory so we can load from it
	SearchAndSetResourceDir("resources");

	// game loop
	while (!WindowShouldClose())		// run the loop untill the user presses ESCAPE or presses the Close button on the window
	{
		// Movimiento lateral con detección de colisión
		// MARIO

		// Movimiento del personaje y ajuste de la cámara
		if (IsKeyDown(KEY_RIGHT)) { cameraX -= SPEED; mario.direction = 0; }
		if (IsKeyDown(KEY_LEFT)) { cameraX += SPEED; mario.direction = 1; }

		int newTileX;
		int newTileY = (int)(mario.rect.y / TILE_SIZE);

		if (!mario.immunity && CheckCollisionRecs(mario.rect, goomba.rect)) {
			HandleMarioCollisionWithGoomba(mario, goomba);
		}

		if (IsKeyDown(KEY_RIGHT)) {
			newTileX = (int)((mario.rect.x + SPEED + mario.rect.width) / TILE_SIZE);
			if (map[newTileY][newTileX] == 0) {
				mario.rect.x += SPEED;
			}
		}

		if (IsKeyDown(KEY_LEFT)) {
			newTileX = (int)((mario.rect.x - SPEED) / TILE_SIZE);
			if (map[newTileY][newTileX] == 0) {
				mario.rect.x -= SPEED;
			}
		}
		if (mario.state == MARIO_DEAD) {
			return 0;
		}

		//ENEMY
		int newTileGoombaX, nextTileGoombaX, nextTileGoombaXBack;
		int newTileGoombaY = (int)(goomba.rect.y / TILE_SIZE);

		if (goomba.state == 1) {
			if (goomba.facing == GOOMBA_FACING_RIGHT) {
				newTileGoombaX = (int)((goomba.rect.x + SPEED_ENEMY + goomba.rect.width) / TILE_SIZE); // Check right
				nextTileGoombaXBack = (int)((goomba.rect.x - SPEED_ENEMY) / TILE_SIZE); // Check left for reversing
			}
			else { // Goomba is facing left
				newTileGoombaX = (int)((goomba.rect.x - SPEED_ENEMY) / TILE_SIZE); // Check left
				nextTileGoombaXBack = (int)((goomba.rect.x + SPEED_ENEMY + goomba.rect.width) / TILE_SIZE); // Check right for reversing
			}

			if (map[newTileGoombaY][newTileGoombaX] == 0) {
				// Goomba moves in its current direction (right or left)
				if (goomba.facing == GOOMBA_FACING_RIGHT) {
					goomba.rect.x += SPEED_ENEMY;
				}
				else {
					goomba.rect.x -= SPEED_ENEMY;
				}
			}
			else {
				// If there's an obstacle in the current direction, goomba will reverse direction
				if (map[newTileGoombaY][nextTileGoombaXBack] == 0) {
					// Reverse movement and update facing direction
					if (goomba.facing == GOOMBA_FACING_RIGHT) {
						goomba.rect.x -= SPEED_ENEMY;  // Move left
						goomba.facing = GOOMBA_FACING_LEFT;  // Change direction
					}
					else {
						goomba.rect.x += SPEED_ENEMY;  // Move right
						goomba.facing = GOOMBA_FACING_RIGHT;  // Change direction
					}
				}
			}
		}

		//Aplicar gravedad
		mario.speed.y += GRAVITY;
		mario.rect.y += mario.speed.y;

		//Mario mata a goomba


		// Update immunity timer
		Immunity(mario);

		// Comprobación de colisión con el suelo usando la matriz
		int tileX = mario.rect.x / TILE_SIZE;
		int tileY = (mario.rect.y + mario.rect.height) / TILE_SIZE;

		if (tileY < MAP_ROWS && map[tileY][tileX] == 1) {
			mario.rect.y = tileY * TILE_SIZE - mario.rect.height; // Colocar sobre el bloque
			mario.speed.y = 0;
			mario.isJumping = false;
		}
		else {
			mario.isJumping = true;
		}

		// Saltar
		if (IsKeyPressed(KEY_SPACE) && !mario.isJumping) {
			mario.speed.y = -JUMP_FORCE;
			mario.isJumping = true;
		}

		// Mover la cámara para que siga a Mario
		camera.target.x = mario.rect.x + TILE_SIZE / 2;
		camera.target.y = mario.rect.y + TILE_SIZE / 2;

		// drawing
		BeginDrawing();

		BeginMode2D(camera);

		// Setup the back buffer for drawing (clear color and depth buffers)
		ClearBackground(BLACK);

		// Dibujar el mapa desde la matriz
		for (int row = 0; row < MAP_ROWS; row++) {
			for (int col = 0; col < MAP_COLS; col++) {
				if (map[row][col] == 1) {
					DrawRectangle(col * TILE_SIZE, row * TILE_SIZE, TILE_SIZE, TILE_SIZE, BLUE);
				}
			}
		}

		//Texture big mario
		Texture2D bmarioTexture1 = LoadTextureFromImage(bmarioImage1);  // Convert Image to Texture
		Texture2D bmarioTexture2 = LoadTextureFromImage(bmarioImage2);
		Texture2D bmarioTexture3 = LoadTextureFromImage(bmarioImage3);
		Texture2D bmarioTexture4 = LoadTextureFromImage(bmarioImage4);
		Texture2D bmarioTexture5 = LoadTextureFromImage(bmarioImage5);

		Texture2D LbmarioTexture1 = LoadTextureFromImage(LbmarioImage1);  // left side
		Texture2D LbmarioTexture2 = LoadTextureFromImage(LbmarioImage2);
		Texture2D LbmarioTexture3 = LoadTextureFromImage(LbmarioImage3);
		Texture2D LbmarioTexture4 = LoadTextureFromImage(LbmarioImage4);
		Texture2D LbmarioTexture5 = LoadTextureFromImage(LbmarioImage5);

		//small mario
		Texture2D marioTexture1 = LoadTextureFromImage(marioImage1);  // Convert Image to Texture
		Texture2D marioTexture2 = LoadTextureFromImage(marioImage2);
		Texture2D marioTexture3 = LoadTextureFromImage(marioImage3);
		Texture2D marioTexture4 = LoadTextureFromImage(marioImage4);
		Texture2D marioTexture5 = LoadTextureFromImage(marioImage5);

		Texture2D LmarioTexture1 = LoadTextureFromImage(LmarioImage1);  // left side
		Texture2D LmarioTexture2 = LoadTextureFromImage(LmarioImage2);
		Texture2D LmarioTexture3 = LoadTextureFromImage(LmarioImage3);
		Texture2D LmarioTexture4 = LoadTextureFromImage(LmarioImage4);
		Texture2D LmarioTexture5 = LoadTextureFromImage(LmarioImage5);

		//Texture Goomba

		Texture2D goombaTexture1 = LoadTextureFromImage(goombaImage1);
		Texture2D goombaTexture2 = LoadTextureFromImage(goombaImage2);
		Texture2D goombaTexture3 = LoadTextureFromImage(goombaImage3);

		if (mario.state == 2) {

			if (mario.direction == 0) {

				if (mario.onGround == true) { DrawTexture(bmarioTexture1, mario.rect.x - 20, mario.rect.y - 160, WHITE); }
				else { DrawTexture(bmarioTexture5, mario.rect.x - 20, mario.rect.y - 160, WHITE); }

			}

			if (mario.direction == 1) {

				if (mario.onGround == true) { DrawTexture(LbmarioTexture1, mario.rect.x - 20, mario.rect.y - 160, WHITE); }
				else { DrawTexture(LbmarioTexture5, mario.rect.x - 20, mario.rect.y - 160, WHITE); }

			}

		}
		else if (mario.state == 1) {

			if (mario.direction == 0) {

				if (mario.onGround == true) { DrawTexture(marioTexture1, mario.rect.x - 20, mario.rect.y - 160, WHITE); }
				else { DrawTexture(marioTexture5, mario.rect.x - 20, mario.rect.y - 160, WHITE); }

			}

			if (mario.direction == 1) {

				if (mario.onGround == true) { DrawTexture(LmarioTexture1, mario.rect.x - 20, mario.rect.y - 160, WHITE); }
				else { DrawTexture(LmarioTexture5, mario.rect.x - 20, mario.rect.y - 160, WHITE); }

			}

		}

		if (goomba.state == 1) {

			DrawTexture(goombaTexture1, goomba.rect.x - 20, goomba.rect.y - 160, WHITE);

		}

		DrawText(TextFormat("Timer: %f", &mario.time), 10, 10, 20, WHITE);

		EndMode2D();

		// end the frame and get ready for the next one  (display frame, poll input, etc...)
		EndDrawing();
	}

	// destroy the window and cleanup the OpenGL context
	CloseWindow();
	return 0;
}
