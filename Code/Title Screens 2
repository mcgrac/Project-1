#include "raylib.h"

#define GRAVITY  0.5f
#define JUMP_FORCE 10.0f
#define SPEED 5.0f
#define SPEED_ENEMY 4.0f // velocidad enemies

#define TILE_SIZE 16
#define MAP_ROWS 28
#define MAP_COLS 100

//definir array 2D mapa
//int map[MAP_ROWS][MAP_COLS] = {
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
//    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
//    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} // Suelo
//};

int map[MAP_ROWS][MAP_COLS] = {
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1} // Suelo
};

// Posici칩n de la "c치mara" que controla el desplazamiento del mapa
float cameraX = { 0 };
float cameraY = { 0 };

// Estructura para el personaje
class Player {
public:

	Vector2 playerPos; // Player position
	Vector2 speed;   // Velocidad del personaje
	bool onGround;
	bool isJumping;  // Bandera para saber si est치 en el aire
	int hp; // Player health, determines if mario is big, small or dead
	int tile; // Mario's sprite being drawn
	bool direction; // Determines if mario is facing left or right
};

class Enemy {
public:

	Rectangle rect;// Rect치ngulo que representa al personaje
	Vector2 speed;
	int hp;
	int tile;
	bool direction;
};

int main() {
	const int screenWidth = 512;
	const int screenHeight = 448;

	InitWindow(screenWidth, screenHeight, "Mapa en Movimiento");

	//load image title screens

	Image Title_screenImage = LoadImage("resources/Title_screen.png");
	Image Time_upImage = LoadImage("resources/Time_up.png");
	Image StrtImage = LoadImage("resources/strt.png");
	Image WinImage = LoadImage("resources/tyMario.png");
	Image Game_overImage = LoadImage("resources/game_over.png");
	Image Initial_screenImage = LoadImage("resources/Initial_screen.png");
	

	int titleScreen = true;
	Texture2D Title_screenTexture = LoadTextureFromImage(Title_screenImage);
	Texture2D Game_overTexture = LoadTextureFromImage(Game_overImage);
	Texture2D StrtTexture = LoadTextureFromImage(StrtImage);
	Texture2D Initial_screenTexture = LoadTextureFromImage(Initial_screenImage);


	//right side{

	Image bmarioImage1 = LoadImage("resources/bmario1.png");
	Image bmarioImage2 = LoadImage("resources/bmario2.png");
	Image bmarioImage3 = LoadImage("resources/bmario3.png");
	Image bmarioImage4 = LoadImage("resources/bmario4.png");
	Image bmarioImage5 = LoadImage("resources/bmario5.png");

	//left side
	Image LbmarioImage1 = LoadImage("resources/Lbmario1.png");
	Image LbmarioImage2 = LoadImage("resources/Lbmario2.png");
	Image LbmarioImage3 = LoadImage("resources/Lbmario3.png");
	Image LbmarioImage4 = LoadImage("resources/Lbmario4.png");
	Image LbmarioImage5 = LoadImage("resources/Lbmario5.png");

	//small mario

	//right side
	Image marioImage1 = LoadImage("resources/mario1.png");
	Image marioImage2 = LoadImage("resources/mario2.png");
	Image marioImage3 = LoadImage("resources/mario3.png");
	Image marioImage4 = LoadImage("resources/mario4.png");
	Image marioImage5 = LoadImage("resources/mario5.png");

	//left side
	Image LmarioImage1 = LoadImage("resources/Lmario1.png");
	Image LmarioImage2 = LoadImage("resources/Lmario2.png");
	Image LmarioImage3 = LoadImage("resources/Lmario3.png");
	Image LmarioImage4 = LoadImage("resources/Lmario4.png");
	Image LmarioImage5 = LoadImage("resources/Lmario5.png");

	//goomba sprites

	Image goombaImage1 = LoadImage("resources/Goomba1.png");
	Image goombaImage2 = LoadImage("resources/Goomba2.png");
	Image goombaImage3 = LoadImage("resources/Goomba3.png");

	//Texture big mario
	Texture2D bmarioTexture1 = LoadTextureFromImage(bmarioImage1);  // Convert Image to Texture
	Texture2D bmarioTexture2 = LoadTextureFromImage(bmarioImage2);
	Texture2D bmarioTexture3 = LoadTextureFromImage(bmarioImage3);
	Texture2D bmarioTexture4 = LoadTextureFromImage(bmarioImage4);
	Texture2D bmarioTexture5 = LoadTextureFromImage(bmarioImage5);

	Texture2D LbmarioTexture1 = LoadTextureFromImage(LbmarioImage1);  // left side
	Texture2D LbmarioTexture2 = LoadTextureFromImage(LbmarioImage2);
	Texture2D LbmarioTexture3 = LoadTextureFromImage(LbmarioImage3);
	Texture2D LbmarioTexture4 = LoadTextureFromImage(LbmarioImage4);
	Texture2D LbmarioTexture5 = LoadTextureFromImage(LbmarioImage5);

	//small mario
	Texture2D marioTexture1 = LoadTextureFromImage(marioImage1);  // Convert Image to Texture
	Texture2D marioTexture2 = LoadTextureFromImage(marioImage2);
	Texture2D marioTexture3 = LoadTextureFromImage(marioImage3);
	Texture2D marioTexture4 = LoadTextureFromImage(marioImage4);
	Texture2D marioTexture5 = LoadTextureFromImage(marioImage5);

	Texture2D LmarioTexture1 = LoadTextureFromImage(LmarioImage1);  // left side
	Texture2D LmarioTexture2 = LoadTextureFromImage(LmarioImage2);
	Texture2D LmarioTexture3 = LoadTextureFromImage(LmarioImage3);
	Texture2D LmarioTexture4 = LoadTextureFromImage(LmarioImage4);
	Texture2D LmarioTexture5 = LoadTextureFromImage(LmarioImage5);

	//Texture Goomba

	Texture2D goombaTexture1 = LoadTextureFromImage(goombaImage1);
	Texture2D goombaTexture2 = LoadTextureFromImage(goombaImage2);
	Texture2D goombaTexture3 = LoadTextureFromImage(goombaImage3);


	SetTargetFPS(60);

	while (!WindowShouldClose()) {


		//initialize mario and the enemies

		Enemy goomba = { { screenWidth / 2, screenHeight - TILE_SIZE * 2 }, {0, 0}, 1,2,0 };
		Player mario = { { screenWidth / 3, screenHeight - TILE_SIZE * 2 },{0, 0},true,false,2,0,0 };

		// Movimiento del personaje y ajuste de la c치mara
		if (IsKeyDown(KEY_RIGHT)) { cameraX -= SPEED; mario.direction = 0; }
		if (IsKeyDown(KEY_LEFT)) { cameraX += SPEED; mario.direction = 1; }

		if (IsKeyDown(KEY_A)) { titleScreen = 3; }


		int newTileGoombaX, nextTileGoombaX, nextTileGoombaXBack;
		int newTileGoombaY = (int)(goomba.rect.y / TILE_SIZE);

		if (goomba.direction == 0) {
			newTileGoombaX = (int)((goomba.rect.x + SPEED_ENEMY + goomba.rect.width) / TILE_SIZE); // Check right
			nextTileGoombaXBack = (int)((goomba.rect.x - SPEED_ENEMY) / TILE_SIZE); // Check left for reversing
		}
		else { // Goomba is facing left
			newTileGoombaX = (int)((goomba.rect.x - SPEED_ENEMY) / TILE_SIZE); // Check left
			nextTileGoombaXBack = (int)((goomba.rect.x + SPEED_ENEMY + goomba.rect.width) / TILE_SIZE); // Check right for reversing
		}

		if (map[newTileGoombaY][newTileGoombaX] == 0) {
			// Goomba moves in its current direction (right or left)
			if (goomba.direction == 0) {
				goomba.rect.x += SPEED_ENEMY;
			}
			else {
				goomba.rect.x -= SPEED_ENEMY;
			}
		}
		else {
			// If there's an obstacle in the current direction, goomba will reverse direction
			if (map[newTileGoombaY][nextTileGoombaXBack] == 0) {
				// Reverse movement and update facing direction
				if (goomba.direction == 0) {
					goomba.rect.x -= SPEED_ENEMY;  // Move left
					goomba.direction = 1;  // Change direction
				}
				else {
					goomba.rect.x += SPEED_ENEMY;  // Move right
					goomba.direction = 0;  // Change direction
				}
			}
		}

		//gravity simulation
		mario.playerPos.y += mario.speed.y;

		// Verificar colisi칩n con el suelo
		if (mario.playerPos.y >= screenHeight - TILE_SIZE * 2) {
			mario.playerPos.y = screenHeight - TILE_SIZE * 2;
			mario.speed.y = 0;
			mario.onGround = true;
		}
		else {
			mario.onGround = false;
		}

		// Salto
		if (IsKeyPressed(KEY_SPACE) && mario.onGround) {
			mario.speed.y = -JUMP_FORCE;
			mario.onGround = false;
		}

		// Ajustar la c치mara en el eje Y para seguir al personaje
		cameraY = -(mario.playerPos.y - screenHeight / 2);


		BeginDrawing();
		ClearBackground(BLACK);

		// Dibujar mapa desplazado
		for (int y = 0; y < MAP_ROWS; y++) {
			for (int x = 0; x < MAP_COLS; x++) {
				if (map[y][x] == 1) {
					DrawRectangle(x * TILE_SIZE + cameraX, y * TILE_SIZE, TILE_SIZE, TILE_SIZE, DARKGRAY);
				}
			}
		}


		//draw title screen

		BeginDrawing();
		ClearBackground(BLACK);

		if (titleScreen==1) {
			DrawTexture(Initial_screenTexture, 0, 0, WHITE);

			if (IsKeyDown(KEY_SPACE)) {
				titleScreen = 2;  // Exit the title screen when space is pressed
			}
		}
		else if (titleScreen == 2) {
			DrawTexture(Initial_screenTexture, 0, 0, WHITE);

			if (IsKeyDown(KEY_B)) {
				titleScreen = 3;  // Exit the title screen when space is pressed
			}
		}
		else if (titleScreen == 3) {
			DrawTexture(StrtTexture, 0, 0, WHITE);

			if (IsKeyDown(KEY_C)) {
				titleScreen = false;  // Exit the title screen when space is pressed
			}
		}
		else if (titleScreen==3) {
			DrawTexture(Game_overTexture, 0, 0, WHITE);

			if (IsKeyDown(KEY_B)) {
				titleScreen = 1;  // Exit the title screen when space is pressed
			}
		}
		else {
			if (mario.hp == 2) {

				if (mario.direction == 0) {

					if (mario.onGround == true) { DrawTexture(bmarioTexture1, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }
					else { DrawTexture(bmarioTexture5, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }

				}

				if (mario.direction == 1) {

					if (mario.onGround == true) { DrawTexture(LbmarioTexture1, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }
					else { DrawTexture(LbmarioTexture5, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }

				}

			}
			else if (mario.hp == 1) {

				if (mario.direction == 0) {

					if (mario.onGround == true) { DrawTexture(marioTexture1, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }
					else { DrawTexture(marioTexture5, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }

				}

				if (mario.direction == 1) {

					if (mario.onGround == true) { DrawTexture(LmarioTexture1, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }
					else { DrawTexture(LmarioTexture5, mario.playerPos.x - 20, mario.playerPos.y - 160, WHITE); }

				}

			}

			if (goomba.hp == 1) {

				DrawTexture(goombaTexture1, goomba.rect.x - 20, goomba.rect.y - 160, WHITE);

			}
		}

		EndDrawing();

		DrawText("Usa las flechas para mover el mapa", 10, 10, 20, RAYWHITE);

	}

	CloseWindow();
	return 0;
}
